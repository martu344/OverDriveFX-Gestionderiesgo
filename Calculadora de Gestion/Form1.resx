<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        iTARAAAAAElFTkSuQmCC
</value>
  </data>
</root>